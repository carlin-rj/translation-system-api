<?php

namespace Modules\Translation\Exporters;

class IosExporter extends BaseTranslationExporter
{
    /**
     * iOS 语言代码映射
     * 将标准语言代码转换为 iOS 使用的语言代码
     */
    private array $languageMapping = [
        // 'en' => 'en',        // 英语
        // 'zh' => 'zh-Hans',   // 简体中文
        // 'zh-TW' => 'zh-Hant',// 繁体中文
        // 'ja' => 'ja',        // 日语
        // 可以根据需要添加更多语言映射
    ];

    protected function handlerExport(string $tempPath): void
    {
        $languages = $this->getLanguages();
        
        foreach ($languages as $language) {
            // 获取 iOS 的语言代码
            $iosLang = $this->getIosLanguageCode($language);
            
            // 创建语言资源目录
            $resourceDir = "{$tempPath}/{$iosLang}.lproj";
            $this->ensureDirectoryExists($resourceDir);

            // 按命名空间分组翻译
            $groupedTranslations = [];
            $translations = $this->fetchByLanguage($language);
            
            foreach ($translations as $translation) {
                // 处理命名空间
                $namespace = $this->getNamespace($translation->key);
                $key = $this->getLocalizedKey($translation->key);
                
                if (!isset($groupedTranslations[$namespace])) {
                    $groupedTranslations[$namespace] = [];
                }
                
                $groupedTranslations[$namespace][$key] = $translation->target_text;
            }

            // 为每个命名空间创建 .strings 文件
            foreach ($groupedTranslations as $namespace => $items) {
                $content = $this->generateStringsFileContent($items);
                $filename = $namespace ? "{$namespace}.strings" : "Localizable.strings";
                $this->putFileContent("{$resourceDir}/{$filename}", $content);
            }

            // 生成 InfoPlist.strings
            $this->generateInfoPlistStrings($resourceDir);
        }
    }

    /**
     * 获取 iOS 的语言代码
     */
    private function getIosLanguageCode(string $language): string
    {
        return $this->languageMapping[$language] ?? $language;
    }

    /**
     * 从键中提取命名空间
     * 例如: "auth.login.title" 返回 "Auth"
     */
    private function getNamespace(string $key): string
    {
        $parts = explode('.', $key);
        return count($parts) > 1 ? ucfirst($parts[0]) : '';
    }

    /**
     * 获取本地化键
     * 例如: "auth.login.title" 返回 "login_title"
     */
    private function getLocalizedKey(string $key): string
    {
        $parts = explode('.', $key);
        
        // 移除命名空间（第一个部分）
        if (count($parts) > 1) {
            array_shift($parts);
        }
        
        return implode('_', $parts);
    }

    /**
     * 生成 .strings 文件内容
     */
    private function generateStringsFileContent(array $translations): string
    {
        $lines = [
            '/* Generated by IosExporter */',
            ''
        ];

        foreach ($translations as $key => $value) {
            // 转义特殊字符
            $escapedValue = $this->escapeIosString($value);
            $lines[] = "\"{$key}\" = \"{$escapedValue}\";";
        }

        return implode("\n", $lines) . "\n";
    }

    /**
     * 转义 iOS strings 文件中的特殊字符
     */
    private function escapeIosString(string $text): string
    {
        $replacements = [
            '"' => '\\"',     // 双引号
            "\n" => '\\n',    // 换行符
            "\r" => '\\r',    // 回车符
            "\t" => '\\t',    // 制表符
            '%@' => '%@',     // 保持 iOS 格式化占位符不变
            '%d' => '%d',     // 保持数字占位符不变
            '%ld' => '%ld',   // 保持长整型占位符不变
            '%f' => '%f',     // 保持浮点数占位符不变
        ];

        return str_replace(
            array_keys($replacements),
            array_values($replacements),
            $text
        );
    }

    /**
     * 生成 InfoPlist.strings 文件
     * 用于本地化 Info.plist 中的内容
     */
    private function generateInfoPlistStrings(string $resourceDir): void
    {
        $content = <<<STRINGS
/* Generated by IosExporter */
"NSCameraUsageDescription" = "This app needs access to camera";
"NSPhotoLibraryUsageDescription" = "This app needs access to photo library";
"NSLocationWhenInUseUsageDescription" = "This app needs access to location when open";

STRINGS;

        $this->putFileContent("{$resourceDir}/InfoPlist.strings", $content);
    }
} 